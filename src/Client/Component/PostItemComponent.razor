@using QYBlog.Shared.Class
@using System.Drawing
@using Size=MudBlazor.Size

<MudCard Style="Border-radius: 20px;" Elevation="5">
    @if (ShowImg)
    {
        <MudCardMedia Image="@RealImg"/>
    }
    <MudCardContent>
        @if (ShowTags)
        {
            foreach (var tag in Post.Tags)
            {
                <MudChip Color="@TagColor">@tag</MudChip>
            }
        }
        <MudStack Spacing="2">
        <h2 style="font-weight: 600;margin: 0;color: #000 ;font-size: 1.6rem;">
            @Post.Title
        </h2>
        <MudText Typo="Typo.body1">@Post.Description</MudText>
        </MudStack>
    </MudCardContent>
    <MudCardActions>
        <MudGrid Spacing="1" Justify="Justify.FlexStart">
            <MudItem/>
            <MudItem>
                <MudIcon Size="Size.Small" Style="color: #bababa" Icon="@Icons.Material.Filled.DateRange"/></MudItem>
            <MudItem>
                <MudText Style="color: #bababa">@FormatDate(@Post.Date)</MudText></MudItem>
            <MudItem>
                <MudIcon Size="Size.Small" Style="color: #bababa" Icon="@Icons.Material.Filled.AccessTime"/></MudItem>
            <MudItem>
                <MudText Style="color: #bababa">阅读时长: @GetReadTime(@Post.MdData)分钟</MudText></MudItem>
            <MudItem>
                <MudIcon Size="Size.Small" Style="color: #bababa" Icon="@Icons.Material.Outlined.FontDownload"/></MudItem>
            <MudItem>
                <MudText Style="color: #bababa">@GetWordCount(@Post.MdData)字</MudText></MudItem>
                        
        </MudGrid>
    </MudCardActions>
</MudCard>

@code {

    [Parameter]
    public Post Post { get; set; } = null!;
    [Inject]
    private HttpClient httpClient { get; set; }

    public bool ShowImg { get; set; } = false;
    public bool ShowTags { get; set; } = false;
    public string RealImg { get; set; } = "";

    public MudBlazor.Color TagColor { get; set; } = CreateTagColor();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsShowImage();
            IsShowTags();
            StateHasChanged();
        }
    }

    static public MudBlazor.Color CreateTagColor()
    {
        Random random = new Random();
        var colors = Enum.GetValues(typeof(MudBlazor.Color)).Cast<MudBlazor.Color>().ToList();
        return colors[random.Next(colors.Count)];
    }

    public void IsShowImage()
    {
        if (Post.Image != null)
        {
            ShowImg = true;
            RealImg = Path.Combine(Post.Path, Post.Image);
            RealImg = RealImg.Replace("\\", "/");
        }
    }
    //格式化Date 
    //2023-01-10T20:32:48+08:00 => Mar 04, 2023
    public string FormatDate(string date)
    {
        var date1 = DateTime.Parse(date);
        return date1.ToString("MMM dd, yyyy");
    }
    

    public void IsShowTags()
    {
        if (Post.Tags != null)
        {
            ShowTags = true;
        }
    }
    
    //获取字数
    public int GetWordCount(string content)
    {
        var count = content.Split(" ").Length;
        return count;
    }
    
    //获取阅读时间
    public int GetReadTime(string content)
    {
        var count = GetWordCount(content);
        var time = count / 200;
        return time;
    }
}

