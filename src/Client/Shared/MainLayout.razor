@using MudBlazor.Utilities
@inherits LayoutComponentBase

<MudThemeProvider Theme="@MyCustomTheme"/>

@code {
  MudTheme MyCustomTheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Background =  (MudColor) "#f5f5f5ff",
            AppbarBackground = (MudColor) "#f5f5f5ff",
            DrawerBackground = (MudColor) "#f5f5f5ff",
            White = (MudColor) "#f5f5f5ff",
            Surface = (MudColor) "#f5f5f5ff",
            
        },
    };
}

<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <RuntimeHeader />
    <MudPaper Class="d-none d-md-block" Elevation="0">
        <MudDrawer Open=true Elevation="0" Breakpoint="Breakpoint.Md">
            <br/>
            <MudDrawerContainer>
                <QYBlog.Client.Component.AuthorInfoComponent/>
            </MudDrawerContainer>

            <MudNavMenu Margin="Margin.Normal">
                <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
                <MudNavLink Href="/search" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Search">Search</MudNavLink>
                <MudNavLink Href="/archives" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Archive">Archives</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
    </MudPaper>

     <MudPaper Class="d-none d-md-block" Elevation="0">
         <MudDrawer Width="400px" Open=true Elevation="0" Anchor="Anchor.Right" Breakpoint="Breakpoint.Md">
             <MudTimePicker PickerVariant="PickerVariant.Static" Color="Color.Success" Rounded="true" Elevation="1" Text="03:37 PM" AmPm="true" />

         </MudDrawer>
    </MudPaper>

    <MudAppBar Elevation="0" Style="display:none" Class="d-block d-md-none" Color=Color.Transparent>
        <MudSpacer />
        <MudIconButton Icon="@AppBarIcon" Edge="Edge.Start" OnClick="DrawerToggle" />
    </MudAppBar>

    <MudPaper Width="200px" Class="pa-3 d-block d-md-none" Elevation="0">
        <QYBlog.Client.Component.AuthorInfoComponent />
    </MudPaper>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large">
            @if (@_drawerOpen)
            {
                <MudPaper Class="@($"d-block d-md-none mud-navmenu mud-navmenu-primary mud-navmenu-margin-dense mud-navmenu-dense mud-navmenu-rounded pa-2 overflow-auto")" Style="overflow:hidden; position:relative;" Elevation="0">
                    <MudNavMenu Margin="Margin.Normal">
                        <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
                        <MudNavLink Href="/search" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Search">Search</MudNavLink>
                        <MudNavLink Href="/archives" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Archive">Archives</MudNavLink>
                    </MudNavMenu>
                </MudPaper>
            }
        </MudContainer>
        <MudContainer MaxWidth="MaxWidth.Large">
            @Body
        </MudContainer>

    </MudMainContent>



    <MudToolBar>
        <div class="d-flex flex-grow-1 gap-4">
            <MudText Typo="Typo.body1" Style="color: var(--accent-color);font-weight: 700;margin-bottom: 5px;"> ©2021-2023轻语 </MudText>
        </div>
    </MudToolBar>
</MudLayout>

@code {
    [Inject] IJSRuntime JSRuntime { get; set; }
    bool _drawerOpen = false;
    string AppBarIcon = Icons.Material.Filled.Menu;
    private bool isMobile;
    private int width { get; set; }

    private int ScreenWidth { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ScreenWidth = await JSRuntime.InvokeAsync<int>("getScreenWidth");
            width = await JSRuntime.InvokeAsync<int>("getWindowWidth");

            if ((ScreenWidth / 2 + 100) >= width)
            {
                isMobile = true;
            }
            else
            {
                isMobile = false;
            }
            await JSRuntime.InvokeVoidAsync("registerResizeHandler", DotNetObjectReference.Create(this));
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task HandleResize()
    {
        width = await JSRuntime.InvokeAsync<int>("getWindowWidth");

        if ( (ScreenWidth / 2 + 100) >= width ){
            isMobile = true;
        }
        else
        {
            isMobile = false;  
        }
        StateHasChanged();
    }



    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("unregisterResizeHandler");
    }

    void DrawerToggle()
    {
        if (!_drawerOpen)
        {
            AppBarIcon = Icons.Material.Filled.Close;
            _drawerOpen = true;

        }
        else
        {
            AppBarIcon = Icons.Material.Filled.Menu;
            _drawerOpen = false;
        }
    }
}

